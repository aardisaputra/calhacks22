{"ast":null,"code":"import { __spreadArray, __read, __assign } from 'tslib';\nimport sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { transformAxes } from '../../render/html/utils/transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\n\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nvar animationTarget = 1000;\n/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nvar globalProjectionState = {\n  /**\n   * Global flag as to whether the tree has animated since the last time\n   * we resized the window\n   */\n  hasAnimatedSinceResize: true,\n  /**\n   * We set this to true once, on the first update. Any nodes added to the tree beyond that\n   * update will be given a `data-projection-id` attribute.\n   */\n  hasEverUpdated: false\n};\nfunction createProjectionNode(_a) {\n  var attachResizeListener = _a.attachResizeListener,\n    defaultParent = _a.defaultParent,\n    measureScroll = _a.measureScroll,\n    resetTransform = _a.resetTransform;\n  return (/** @class */function () {\n      function ProjectionNode(id, latestValues, parent) {\n        var _this = this;\n        if (latestValues === void 0) {\n          latestValues = {};\n        }\n        if (parent === void 0) {\n          parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n        }\n        /**\n         * A Set containing all this component's children. This is used to iterate\n         * through the children.\n         *\n         * TODO: This could be faster to iterate as a flat array stored on the root node.\n         */\n        this.children = new Set();\n        /**\n         * Options for the node. We use this to configure what kind of layout animations\n         * we should perform (if any).\n         */\n        this.options = {};\n        /**\n         * We use this to detect when its safe to shut down part of a projection tree.\n         * We have to keep projecting children for scale correction and relative projection\n         * until all their parents stop performing layout animations.\n         */\n        this.isTreeAnimating = false;\n        this.isAnimationBlocked = false;\n        /**\n         * Flag to true if we think this layout has been changed. We can't always know this,\n         * currently we set it to true every time a component renders, or if it has a layoutDependency\n         * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n         * and if one node is dirtied, they all are.\n         */\n        this.isLayoutDirty = false;\n        /**\n         * Block layout updates for instant layout transitions throughout the tree.\n         */\n        this.updateManuallyBlocked = false;\n        this.updateBlockedByResize = false;\n        /**\n         * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n         * call.\n         */\n        this.isUpdating = false;\n        /**\n         * If this is an SVG element we currently disable projection transforms\n         */\n        this.isSVG = false;\n        /**\n         * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n         * its projection styles.\n         */\n        this.needsReset = false;\n        /**\n         * Flags whether this node should have its transform reset prior to measuring.\n         */\n        this.shouldResetTransform = false;\n        /**\n         * An object representing the calculated contextual/accumulated/tree scale.\n         * This will be used to scale calculcated projection transforms, as these are\n         * calculated in screen-space but need to be scaled for elements to actually\n         * make it to their calculated destinations.\n         *\n         * TODO: Lazy-init\n         */\n        this.treeScale = {\n          x: 1,\n          y: 1\n        };\n        /**\n         *\n         */\n        this.eventHandlers = new Map();\n        // Note: Currently only running on root node\n        this.potentialNodes = new Map();\n        this.checkUpdateFailed = function () {\n          if (_this.isUpdating) {\n            _this.isUpdating = false;\n            _this.clearAllSnapshots();\n          }\n        };\n        this.updateProjection = function () {\n          _this.nodes.forEach(resolveTargetDelta);\n          _this.nodes.forEach(calcProjection);\n        };\n        this.hasProjected = false;\n        this.isVisible = true;\n        this.animationProgress = 0;\n        /**\n         * Shared layout\n         */\n        // TODO Only running on root node\n        this.sharedNodes = new Map();\n        this.id = id;\n        this.latestValues = latestValues;\n        this.root = parent ? parent.root || parent : this;\n        this.path = parent ? __spreadArray(__spreadArray([], __read(parent.path), false), [parent], false) : [];\n        this.parent = parent;\n        this.depth = parent ? parent.depth + 1 : 0;\n        id && this.root.registerPotentialNode(id, this);\n        for (var i = 0; i < this.path.length; i++) {\n          this.path[i].shouldResetTransform = true;\n        }\n        if (this.root === this) this.nodes = new FlatTree();\n      }\n      ProjectionNode.prototype.addEventListener = function (name, handler) {\n        if (!this.eventHandlers.has(name)) {\n          this.eventHandlers.set(name, new SubscriptionManager());\n        }\n        return this.eventHandlers.get(name).add(handler);\n      };\n      ProjectionNode.prototype.notifyListeners = function (name) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n          args[_i - 1] = arguments[_i];\n        }\n        var subscriptionManager = this.eventHandlers.get(name);\n        subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, __spreadArray([], __read(args), false));\n      };\n      ProjectionNode.prototype.hasListeners = function (name) {\n        return this.eventHandlers.has(name);\n      };\n      ProjectionNode.prototype.registerPotentialNode = function (id, node) {\n        this.potentialNodes.set(id, node);\n      };\n      /**\n       * Lifecycles\n       */\n      ProjectionNode.prototype.mount = function (instance, isLayoutDirty) {\n        var _this = this;\n        var _a;\n        if (isLayoutDirty === void 0) {\n          isLayoutDirty = false;\n        }\n        if (this.instance) return;\n        this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n        this.instance = instance;\n        var _b = this.options,\n          layoutId = _b.layoutId,\n          layout = _b.layout,\n          visualElement = _b.visualElement;\n        if (visualElement && !visualElement.getInstance()) {\n          visualElement.mount(instance);\n        }\n        this.root.nodes.add(this);\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n        this.id && this.root.potentialNodes.delete(this.id);\n        if (isLayoutDirty && (layout || layoutId)) {\n          this.isLayoutDirty = true;\n        }\n        if (attachResizeListener) {\n          var unblockTimeout_1;\n          var resizeUnblockUpdate_1 = function () {\n            return _this.root.updateBlockedByResize = false;\n          };\n          attachResizeListener(instance, function () {\n            _this.root.updateBlockedByResize = true;\n            clearTimeout(unblockTimeout_1);\n            unblockTimeout_1 = window.setTimeout(resizeUnblockUpdate_1, 250);\n            if (globalProjectionState.hasAnimatedSinceResize) {\n              globalProjectionState.hasAnimatedSinceResize = false;\n              _this.nodes.forEach(finishAnimation);\n            }\n          });\n        }\n        if (layoutId) {\n          this.root.registerSharedNode(layoutId, this);\n        }\n        // Only register the handler if it requires layout animation\n        if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n          this.addEventListener(\"didUpdate\", function (_a) {\n            var _b, _c, _d, _e, _f;\n            var delta = _a.delta,\n              hasLayoutChanged = _a.hasLayoutChanged,\n              hasRelativeTargetChanged = _a.hasRelativeTargetChanged,\n              newLayout = _a.layout;\n            if (_this.isTreeAnimationBlocked()) {\n              _this.target = undefined;\n              _this.relativeTarget = undefined;\n              return;\n            }\n            // TODO: Check here if an animation exists\n            var layoutTransition = (_c = (_b = _this.options.transition) !== null && _b !== void 0 ? _b : visualElement.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;\n            var onLayoutAnimationComplete = visualElement.getProps().onLayoutAnimationComplete;\n            /**\n             * The target layout of the element might stay the same,\n             * but its position relative to its parent has changed.\n             */\n            var targetChanged = !_this.targetLayout || !boxEquals(_this.targetLayout, newLayout) || hasRelativeTargetChanged;\n            /**\n             * If the layout hasn't seemed to have changed, it might be that the\n             * element is visually in the same place in the document but its position\n             * relative to its parent has indeed changed. So here we check for that.\n             */\n            var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n            if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this.currentAnimation)) {\n              if (_this.resumeFrom) {\n                _this.resumingFrom = _this.resumeFrom;\n                _this.resumingFrom.resumingFrom = undefined;\n              }\n              _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n              var animationOptions = __assign(__assign({}, getValueTransition(layoutTransition, \"layout\")), {\n                onComplete: onLayoutAnimationComplete\n              });\n              if (visualElement.shouldReduceMotion) {\n                animationOptions.delay = 0;\n                animationOptions.type = false;\n              }\n              _this.startAnimation(animationOptions);\n            } else {\n              /**\n               * If the layout hasn't changed and we have an animation that hasn't started yet,\n               * finish it immediately. Otherwise it will be animating from a location\n               * that was probably never commited to screen and look like a jumpy box.\n               */\n              if (!hasLayoutChanged && _this.animationProgress === 0) {\n                _this.finishAnimation();\n              }\n              _this.isLead() && ((_f = (_e = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e));\n            }\n            _this.targetLayout = newLayout;\n          });\n        }\n      };\n      ProjectionNode.prototype.unmount = function () {\n        var _a, _b;\n        this.options.layoutId && this.willUpdate();\n        this.root.nodes.remove(this);\n        (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n        (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n        this.instance = undefined;\n        cancelSync.preRender(this.updateProjection);\n      };\n      // only on the root\n      ProjectionNode.prototype.blockUpdate = function () {\n        this.updateManuallyBlocked = true;\n      };\n      ProjectionNode.prototype.unblockUpdate = function () {\n        this.updateManuallyBlocked = false;\n      };\n      ProjectionNode.prototype.isUpdateBlocked = function () {\n        return this.updateManuallyBlocked || this.updateBlockedByResize;\n      };\n      ProjectionNode.prototype.isTreeAnimationBlocked = function () {\n        var _a;\n        return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n      };\n      // Note: currently only running on root node\n      ProjectionNode.prototype.startUpdate = function () {\n        var _a;\n        if (this.isUpdateBlocked()) return;\n        this.isUpdating = true;\n        (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n      };\n      ProjectionNode.prototype.willUpdate = function (shouldNotifyListeners) {\n        var _a, _b, _c;\n        if (shouldNotifyListeners === void 0) {\n          shouldNotifyListeners = true;\n        }\n        if (this.root.isUpdateBlocked()) {\n          (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n          return;\n        }\n        !this.root.isUpdating && this.root.startUpdate();\n        if (this.isLayoutDirty) return;\n        this.isLayoutDirty = true;\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          node.shouldResetTransform = true;\n          /**\n           * TODO: Check we haven't updated the scroll\n           * since the last didUpdate\n           */\n          node.updateScroll();\n        }\n        var _d = this.options,\n          layoutId = _d.layoutId,\n          layout = _d.layout;\n        if (layoutId === undefined && !layout) return;\n        var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n        this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n        this.updateSnapshot();\n        shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n      };\n      // Note: Currently only running on root node\n      ProjectionNode.prototype.didUpdate = function () {\n        var updateWasBlocked = this.isUpdateBlocked();\n        // When doing an instant transition, we skip the layout update,\n        // but should still clean up the measurements so that the next\n        // snapshot could be taken correctly.\n        if (updateWasBlocked) {\n          this.unblockUpdate();\n          this.clearAllSnapshots();\n          this.nodes.forEach(clearMeasurements);\n          return;\n        }\n        if (!this.isUpdating) return;\n        this.isUpdating = false;\n        /**\n         * Search for and mount newly-added projection elements.\n         *\n         * TODO: Every time a new component is rendered we could search up the tree for\n         * the closest mounted node and query from there rather than document.\n         */\n        if (this.potentialNodes.size) {\n          this.potentialNodes.forEach(mountNodeEarly);\n          this.potentialNodes.clear();\n        }\n        /**\n         * Write\n         */\n        this.nodes.forEach(resetTransformStyle);\n        /**\n         * Read ==================\n         */\n        // Update layout measurements of updated children\n        this.nodes.forEach(updateLayout);\n        /**\n         * Write\n         */\n        // Notify listeners that the layout is updated\n        this.nodes.forEach(notifyLayoutUpdate);\n        this.clearAllSnapshots();\n        // Flush any scheduled updates\n        flushSync.update();\n        flushSync.preRender();\n        flushSync.render();\n      };\n      ProjectionNode.prototype.clearAllSnapshots = function () {\n        this.nodes.forEach(clearSnapshot);\n        this.sharedNodes.forEach(removeLeadSnapshots);\n      };\n      ProjectionNode.prototype.scheduleUpdateProjection = function () {\n        sync.preRender(this.updateProjection, false, true);\n      };\n      ProjectionNode.prototype.scheduleCheckAfterUnmount = function () {\n        var _this = this;\n        /**\n         * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n         * we manually call didUpdate to give a chance to the siblings to animate.\n         * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n         */\n        sync.postRender(function () {\n          if (_this.isLayoutDirty) {\n            _this.root.didUpdate();\n          } else {\n            _this.root.checkUpdateFailed();\n          }\n        });\n      };\n      /**\n       * Update measurements\n       */\n      ProjectionNode.prototype.updateSnapshot = function () {\n        if (this.snapshot || !this.instance) return;\n        var measured = this.measure();\n        var layout = this.removeTransform(this.removeElementScroll(measured));\n        roundBox(layout);\n        this.snapshot = {\n          measured: measured,\n          layout: layout,\n          latestValues: {}\n        };\n      };\n      ProjectionNode.prototype.updateLayout = function () {\n        var _a;\n        if (!this.instance) return;\n        // TODO: Incorporate into a forwarded scroll offset\n        this.updateScroll();\n        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n          return;\n        }\n        /**\n         * When a node is mounted, it simply resumes from the prevLead's\n         * snapshot instead of taking a new one, but the ancestors scroll\n         * might have updated while the prevLead is unmounted. We need to\n         * update the scroll again to make sure the layout we measure is\n         * up to date.\n         */\n        if (this.resumeFrom && !this.resumeFrom.instance) {\n          for (var i = 0; i < this.path.length; i++) {\n            var node = this.path[i];\n            node.updateScroll();\n          }\n        }\n        var measured = this.measure();\n        roundBox(measured);\n        var prevLayout = this.layout;\n        this.layout = {\n          measured: measured,\n          actual: this.removeElementScroll(measured)\n        };\n        this.layoutCorrected = createBox();\n        this.isLayoutDirty = false;\n        this.projectionDelta = undefined;\n        this.notifyListeners(\"measure\", this.layout.actual);\n        (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n      };\n      ProjectionNode.prototype.updateScroll = function () {\n        if (this.options.layoutScroll && this.instance) {\n          this.scroll = measureScroll(this.instance);\n        }\n      };\n      ProjectionNode.prototype.resetTransform = function () {\n        var _a;\n        if (!resetTransform) return;\n        var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n        var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n        var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n        var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n        var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n        if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n          resetTransform(this.instance, transformTemplateValue);\n          this.shouldResetTransform = false;\n          this.scheduleRender();\n        }\n      };\n      ProjectionNode.prototype.measure = function () {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return createBox();\n        var box = visualElement.measureViewportBox();\n        // Remove viewport scroll to give page-relative coordinates\n        var scroll = this.root.scroll;\n        if (scroll) {\n          translateAxis(box.x, scroll.x);\n          translateAxis(box.y, scroll.y);\n        }\n        return box;\n      };\n      ProjectionNode.prototype.removeElementScroll = function (box) {\n        var boxWithoutScroll = createBox();\n        copyBoxInto(boxWithoutScroll, box);\n        /**\n         * Performance TODO: Keep a cumulative scroll offset down the tree\n         * rather than loop back up the path.\n         */\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          var scroll_1 = node.scroll,\n            options = node.options;\n          if (node !== this.root && scroll_1 && options.layoutScroll) {\n            translateAxis(boxWithoutScroll.x, scroll_1.x);\n            translateAxis(boxWithoutScroll.y, scroll_1.y);\n          }\n        }\n        return boxWithoutScroll;\n      };\n      ProjectionNode.prototype.applyTransform = function (box, transformOnly) {\n        if (transformOnly === void 0) {\n          transformOnly = false;\n        }\n        var withTransforms = createBox();\n        copyBoxInto(withTransforms, box);\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(withTransforms, {\n              x: -node.scroll.x,\n              y: -node.scroll.y\n            });\n          }\n          if (!hasTransform(node.latestValues)) continue;\n          transformBox(withTransforms, node.latestValues);\n        }\n        if (hasTransform(this.latestValues)) {\n          transformBox(withTransforms, this.latestValues);\n        }\n        return withTransforms;\n      };\n      ProjectionNode.prototype.removeTransform = function (box) {\n        var _a;\n        var boxWithoutTransform = createBox();\n        copyBoxInto(boxWithoutTransform, box);\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!node.instance) continue;\n          if (!hasTransform(node.latestValues)) continue;\n          hasScale(node.latestValues) && node.updateSnapshot();\n          var sourceBox = createBox();\n          var nodeBox = node.measure();\n          copyBoxInto(sourceBox, nodeBox);\n          removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n        }\n        if (hasTransform(this.latestValues)) {\n          removeBoxTransforms(boxWithoutTransform, this.latestValues);\n        }\n        return boxWithoutTransform;\n      };\n      /**\n       *\n       */\n      ProjectionNode.prototype.setTargetDelta = function (delta) {\n        this.targetDelta = delta;\n        this.root.scheduleUpdateProjection();\n      };\n      ProjectionNode.prototype.setOptions = function (options) {\n        var _a;\n        this.options = __assign(__assign(__assign({}, this.options), options), {\n          crossfade: (_a = options.crossfade) !== null && _a !== void 0 ? _a : true\n        });\n      };\n      ProjectionNode.prototype.clearMeasurements = function () {\n        this.scroll = undefined;\n        this.layout = undefined;\n        this.snapshot = undefined;\n        this.prevTransformTemplateValue = undefined;\n        this.targetDelta = undefined;\n        this.target = undefined;\n        this.isLayoutDirty = false;\n      };\n      /**\n       * Frame calculations\n       */\n      ProjectionNode.prototype.resolveTargetDelta = function () {\n        var _a;\n        var _b = this.options,\n          layout = _b.layout,\n          layoutId = _b.layoutId;\n        /**\n         * If we have no layout, we can't perform projection, so early return\n         */\n        if (!this.layout || !(layout || layoutId)) return;\n        /**\n         * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n         * a relativeParent. This will allow a component to perform scale correction\n         * even if no animation has started.\n         */\n        // TODO If this is unsuccessful this currently happens every frame\n        if (!this.targetDelta && !this.relativeTarget) {\n          // TODO: This is a semi-repetition of further down this function, make DRY\n          this.relativeParent = this.getClosestProjectingParent();\n          if (this.relativeParent && this.relativeParent.layout) {\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          }\n        }\n        /**\n         * If we have no relative target or no target delta our target isn't valid\n         * for this frame.\n         */\n        if (!this.relativeTarget && !this.targetDelta) return;\n        /**\n         * Lazy-init target data structure\n         */\n        if (!this.target) {\n          this.target = createBox();\n          this.targetWithTransforms = createBox();\n        }\n        /**\n         * If we've got a relative box for this component, resolve it into a target relative to the parent.\n         */\n        if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n          /**\n           * If we've only got a targetDelta, resolve it into a target\n           */\n        } else if (this.targetDelta) {\n          if (Boolean(this.resumingFrom)) {\n            // TODO: This is creating a new object every frame\n            this.target = this.applyTransform(this.layout.actual);\n          } else {\n            copyBoxInto(this.target, this.layout.actual);\n          }\n          applyBoxDelta(this.target, this.targetDelta);\n        } else {\n          /**\n           * If no target, use own layout as target\n           */\n          copyBoxInto(this.target, this.layout.actual);\n        }\n        /**\n         * If we've been told to attempt to resolve a relative target, do so.\n         */\n        if (this.attemptToResolveRelativeTarget) {\n          this.attemptToResolveRelativeTarget = false;\n          this.relativeParent = this.getClosestProjectingParent();\n          if (this.relativeParent && Boolean(this.relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !this.relativeParent.options.layoutScroll && this.relativeParent.target) {\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          }\n        }\n      };\n      ProjectionNode.prototype.getClosestProjectingParent = function () {\n        if (!this.parent || hasTransform(this.parent.latestValues)) return undefined;\n        if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {\n          return this.parent;\n        } else {\n          return this.parent.getClosestProjectingParent();\n        }\n      };\n      ProjectionNode.prototype.calcProjection = function () {\n        var _a;\n        var _b = this.options,\n          layout = _b.layout,\n          layoutId = _b.layoutId;\n        /**\n         * If this section of the tree isn't animating we can\n         * delete our target sources for the following frame.\n         */\n        this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n        if (!this.isTreeAnimating) {\n          this.targetDelta = this.relativeTarget = undefined;\n        }\n        if (!this.layout || !(layout || layoutId)) return;\n        var lead = this.getLead();\n        /**\n         * Reset the corrected box with the latest values from box, as we're then going\n         * to perform mutative operations on it.\n         */\n        copyBoxInto(this.layoutCorrected, this.layout.actual);\n        /**\n         * Apply all the parent deltas to this box to produce the corrected box. This\n         * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n         */\n        applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n        var target = lead.target;\n        if (!target) return;\n        if (!this.projectionDelta) {\n          this.projectionDelta = createDelta();\n          this.projectionDeltaWithTransform = createDelta();\n        }\n        var prevTreeScaleX = this.treeScale.x;\n        var prevTreeScaleY = this.treeScale.y;\n        var prevProjectionTransform = this.projectionTransform;\n        /**\n         * Update the delta between the corrected box and the target box before user-set transforms were applied.\n         * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n         * for our layout reprojection, but still allow them to be scaled correctly by the user.\n         * It might be that to simplify this we may want to accept that user-set scale is also corrected\n         * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n         * to allow people to choose whether these styles are corrected based on just the\n         * layout reprojection or the final bounding box.\n         */\n        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n        this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n        if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n          this.hasProjected = true;\n          this.scheduleRender();\n          this.notifyListeners(\"projectionUpdate\", target);\n        }\n      };\n      ProjectionNode.prototype.hide = function () {\n        this.isVisible = false;\n        // TODO: Schedule render\n      };\n\n      ProjectionNode.prototype.show = function () {\n        this.isVisible = true;\n        // TODO: Schedule render\n      };\n\n      ProjectionNode.prototype.scheduleRender = function (notifyAll) {\n        var _a, _b, _c;\n        if (notifyAll === void 0) {\n          notifyAll = true;\n        }\n        (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n        notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n        if (this.resumingFrom && !this.resumingFrom.instance) {\n          this.resumingFrom = undefined;\n        }\n      };\n      ProjectionNode.prototype.setAnimationOrigin = function (delta, hasOnlyRelativeTargetChanged) {\n        var _this = this;\n        var _a;\n        if (hasOnlyRelativeTargetChanged === void 0) {\n          hasOnlyRelativeTargetChanged = false;\n        }\n        var snapshot = this.snapshot;\n        var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n        var mixedValues = __assign({}, this.latestValues);\n        var targetDelta = createDelta();\n        this.relativeTarget = this.relativeTargetOrigin = undefined;\n        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n        var relativeLayout = createBox();\n        var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n        var isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n        var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n        this.animationProgress = 0;\n        this.mixTargetDelta = function (latest) {\n          var _a;\n          var progress = latest / 1000;\n          mixAxisDelta(targetDelta.x, delta.x, progress);\n          mixAxisDelta(targetDelta.y, delta.y, progress);\n          _this.setTargetDelta(targetDelta);\n          if (_this.relativeTarget && _this.relativeTargetOrigin && _this.layout && ((_a = _this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n            calcRelativePosition(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);\n            mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress);\n          }\n          if (isSharedLayoutAnimation) {\n            _this.animationValues = mixedValues;\n            mixValues(mixedValues, snapshotLatestValues, _this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n          }\n          _this.root.scheduleUpdateProjection();\n          _this.scheduleRender();\n          _this.animationProgress = progress;\n        };\n        this.mixTargetDelta(0);\n      };\n      ProjectionNode.prototype.startAnimation = function (options) {\n        var _this = this;\n        var _a, _b;\n        (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n        if (this.resumingFrom) {\n          (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n        }\n        if (this.pendingAnimation) {\n          cancelSync.update(this.pendingAnimation);\n          this.pendingAnimation = undefined;\n        }\n        /**\n         * Start the animation in the next frame to have a frame with progress 0,\n         * where the target is the same as when the animation started, so we can\n         * calculate the relative positions correctly for instant transitions.\n         */\n        this.pendingAnimation = sync.update(function () {\n          globalProjectionState.hasAnimatedSinceResize = true;\n          _this.currentAnimation = animate(0, animationTarget, __assign(__assign({}, options), {\n            onUpdate: function (latest) {\n              var _a;\n              _this.mixTargetDelta(latest);\n              (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n            },\n            onComplete: function () {\n              var _a;\n              (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n              _this.completeAnimation();\n            }\n          }));\n          if (_this.resumingFrom) {\n            _this.resumingFrom.currentAnimation = _this.currentAnimation;\n          }\n          _this.pendingAnimation = undefined;\n        });\n      };\n      ProjectionNode.prototype.completeAnimation = function () {\n        var _a;\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = undefined;\n          this.resumingFrom.preserveOpacity = undefined;\n        }\n        (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n        this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n        this.notifyListeners(\"animationComplete\");\n      };\n      ProjectionNode.prototype.finishAnimation = function () {\n        var _a;\n        if (this.currentAnimation) {\n          (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n          this.currentAnimation.stop();\n        }\n        this.completeAnimation();\n      };\n      ProjectionNode.prototype.applyTransformsToTarget = function () {\n        var _a = this.getLead(),\n          targetWithTransforms = _a.targetWithTransforms,\n          target = _a.target,\n          layout = _a.layout,\n          latestValues = _a.latestValues;\n        if (!targetWithTransforms || !target || !layout) return;\n        copyBoxInto(targetWithTransforms, target);\n        /**\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n         * This is the final box that we will then project into by calculating a transform delta and\n         * applying it to the corrected box.\n         */\n        transformBox(targetWithTransforms, latestValues);\n        /**\n         * Update the delta between the corrected box and the final target box, after\n         * user-set transforms are applied to it. This will be used by the renderer to\n         * create a transform style that will reproject the element from its actual layout\n         * into the desired bounding box.\n         */\n        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n      };\n      ProjectionNode.prototype.registerSharedNode = function (layoutId, node) {\n        var _a, _b, _c;\n        if (!this.sharedNodes.has(layoutId)) {\n          this.sharedNodes.set(layoutId, new NodeStack());\n        }\n        var stack = this.sharedNodes.get(layoutId);\n        stack.add(node);\n        node.promote({\n          transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n          preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n        });\n      };\n      ProjectionNode.prototype.isLead = function () {\n        var stack = this.getStack();\n        return stack ? stack.lead === this : true;\n      };\n      ProjectionNode.prototype.getLead = function () {\n        var _a;\n        var layoutId = this.options.layoutId;\n        return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n      };\n      ProjectionNode.prototype.getPrevLead = function () {\n        var _a;\n        var layoutId = this.options.layoutId;\n        return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n      };\n      ProjectionNode.prototype.getStack = function () {\n        var layoutId = this.options.layoutId;\n        if (layoutId) return this.root.sharedNodes.get(layoutId);\n      };\n      ProjectionNode.prototype.promote = function (_a) {\n        var _b = _a === void 0 ? {} : _a,\n          needsReset = _b.needsReset,\n          transition = _b.transition,\n          preserveFollowOpacity = _b.preserveFollowOpacity;\n        var stack = this.getStack();\n        if (stack) stack.promote(this, preserveFollowOpacity);\n        if (needsReset) {\n          this.projectionDelta = undefined;\n          this.needsReset = true;\n        }\n        if (transition) this.setOptions({\n          transition: transition\n        });\n      };\n      ProjectionNode.prototype.relegate = function () {\n        var stack = this.getStack();\n        if (stack) {\n          return stack.relegate(this);\n        } else {\n          return false;\n        }\n      };\n      ProjectionNode.prototype.resetRotation = function () {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return;\n        // If there's no detected rotation values, we can early return without a forced render.\n        var hasRotate = false;\n        // Keep a record of all the values we've reset\n        var resetValues = {};\n        // Check the rotate value of all axes and reset to 0\n        for (var i = 0; i < transformAxes.length; i++) {\n          var axis = transformAxes[i];\n          var key = \"rotate\" + axis;\n          // If this rotation doesn't exist as a motion value, then we don't\n          // need to reset it\n          if (!visualElement.getStaticValue(key)) {\n            continue;\n          }\n          hasRotate = true;\n          // Record the rotation and then temporarily set it to 0\n          resetValues[key] = visualElement.getStaticValue(key);\n          visualElement.setStaticValue(key, 0);\n        }\n        // If there's no rotation values, we don't need to do any more.\n        if (!hasRotate) return;\n        // Force a render of this element to apply the transform with all rotations\n        // set to 0.\n        visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender();\n        // Put back all the values we reset\n        for (var key in resetValues) {\n          visualElement.setStaticValue(key, resetValues[key]);\n        }\n        // Schedule a render for the next frame. This ensures we won't visually\n        // see the element with the reset rotate value applied.\n        visualElement.scheduleRender();\n      };\n      ProjectionNode.prototype.getProjectionStyles = function (styleProp) {\n        var _a, _b, _c, _d, _e, _f;\n        if (styleProp === void 0) {\n          styleProp = {};\n        }\n        // TODO: Return lifecycle-persistent object\n        var styles = {};\n        if (!this.instance || this.isSVG) return styles;\n        if (!this.isVisible) {\n          return {\n            visibility: \"hidden\"\n          };\n        } else {\n          styles.visibility = \"\";\n        }\n        var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n        if (this.needsReset) {\n          this.needsReset = false;\n          styles.opacity = \"\";\n          styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n          return styles;\n        }\n        var lead = this.getLead();\n        if (!this.projectionDelta || !this.layout || !lead.target) {\n          var emptyStyles = {};\n          if (this.options.layoutId) {\n            emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;\n            emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          }\n          if (this.hasProjected && !hasTransform(this.latestValues)) {\n            emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n            this.hasProjected = false;\n          }\n          return emptyStyles;\n        }\n        var valuesToRender = lead.animationValues || lead.latestValues;\n        this.applyTransformsToTarget();\n        styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n        if (transformTemplate) {\n          styles.transform = transformTemplate(valuesToRender, styles.transform);\n        }\n        var _g = this.projectionDelta,\n          x = _g.x,\n          y = _g.y;\n        styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n        if (lead.animationValues) {\n          /**\n           * If the lead component is animating, assign this either the entering/leaving\n           * opacity\n           */\n          styles.opacity = lead === this ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n        } else {\n          /**\n           * Or we're not animating at all, set the lead component to its actual\n           * opacity and other components to hidden.\n           */\n          styles.opacity = lead === this ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : \"\" : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;\n        }\n        /**\n         * Apply scale correction\n         */\n        for (var key in scaleCorrectors) {\n          if (valuesToRender[key] === undefined) continue;\n          var _h = scaleCorrectors[key],\n            correct = _h.correct,\n            applyTo = _h.applyTo;\n          var corrected = correct(valuesToRender[key], lead);\n          if (applyTo) {\n            var num = applyTo.length;\n            for (var i = 0; i < num; i++) {\n              styles[applyTo[i]] = corrected;\n            }\n          } else {\n            styles[key] = corrected;\n          }\n        }\n        /**\n         * Disable pointer events on follow components. This is to ensure\n         * that if a follow component covers a lead component it doesn't block\n         * pointer events on the lead.\n         */\n        if (this.options.layoutId) {\n          styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n        }\n        return styles;\n      };\n      ProjectionNode.prototype.clearSnapshot = function () {\n        this.resumeFrom = this.snapshot = undefined;\n      };\n      // Only run on root\n      ProjectionNode.prototype.resetTree = function () {\n        this.root.nodes.forEach(function (node) {\n          var _a;\n          return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n        });\n        this.root.nodes.forEach(clearMeasurements);\n        this.root.sharedNodes.clear();\n      };\n      return ProjectionNode;\n    }()\n  );\n}\nfunction updateLayout(node) {\n  node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n  var _a, _b, _c, _d;\n  var snapshot = (_b = (_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node.snapshot;\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    var _e = node.layout,\n      layout_1 = _e.actual,\n      measuredLayout = _e.measured;\n    // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n    if (node.options.animationType === \"size\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        var length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout_1[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (node.options.animationType === \"position\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        var length = calcLength(layout_1[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n    var layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout_1, snapshot.layout);\n    var visualDelta = createDelta();\n    if (snapshot.isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n    } else {\n      calcBoxDelta(visualDelta, layout_1, snapshot.layout);\n    }\n    var hasLayoutChanged = !isDeltaZero(layoutDelta);\n    var hasRelativeTargetChanged = false;\n    if (!node.resumeFrom) {\n      node.relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n      if (node.relativeParent && !node.relativeParent.resumeFrom) {\n        var _f = node.relativeParent,\n          parentSnapshot = _f.snapshot,\n          parentLayout = _f.layout;\n        if (parentSnapshot && parentLayout) {\n          var relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n          var relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout_1, parentLayout.actual);\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n        }\n      }\n    }\n    node.notifyListeners(\"didUpdate\", {\n      layout: layout_1,\n      snapshot: snapshot,\n      delta: visualDelta,\n      layoutDelta: layoutDelta,\n      hasLayoutChanged: hasLayoutChanged,\n      hasRelativeTargetChanged: hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    (_d = (_c = node.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n  node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n  var visualElement = node.options.visualElement;\n  if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notifyBeforeLayoutMeasure();\n  }\n  node.resetTransform();\n}\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n  node.calcProjection();\n}\nfunction resetRotation(node) {\n  node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\nfunction mountNodeEarly(node, id) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  var searchNode = node.root;\n  for (var i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n  var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  var element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(id, \"\\\"]\"));\n  if (element) node.mount(element, true);\n}\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\nexport { createProjectionNode, globalProjectionState, mixAxis, mixAxisDelta, mixBox };","map":{"version":3,"names":["__spreadArray","__read","__assign","sync","cancelSync","flushSync","mix","animate","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","transformAxes","FlatTree","resolveMotionValue","animationTarget","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","createProjectionNode","_a","attachResizeListener","defaultParent","measureScroll","resetTransform","ProjectionNode","id","latestValues","parent","_this","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","registerPotentialNode","i","length","prototype","addEventListener","name","handler","has","set","get","add","notifyListeners","args","_i","arguments","subscriptionManager","notify","apply","hasListeners","node","mount","instance","SVGElement","tagName","_b","layoutId","layout","visualElement","getInstance","delete","unblockTimeout_1","resizeUnblockUpdate_1","clearTimeout","window","setTimeout","finishAnimation","registerSharedNode","_c","_d","_e","_f","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationComplete","getProps","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onComplete","shouldReduceMotion","delay","type","startAnimation","isLead","onExitComplete","call","unmount","willUpdate","remove","getStack","preRender","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","shouldNotifyListeners","updateScroll","transformTemplate","prevTransformTemplateValue","updateSnapshot","didUpdate","updateWasBlocked","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","render","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measured","measure","removeTransform","removeElementScroll","roundBox","alwaysMeasureLayout","prevLayout","actual","layoutCorrected","projectionDelta","notifyLayoutMeasure","layoutScroll","scroll","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","box","measureViewportBox","boxWithoutScroll","scroll_1","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","Boolean","attemptToResolveRelativeTarget","pendingAnimation","lead","getLead","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","hide","show","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isShared","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","stack","promote","initialPromotionConfig","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasRotate","resetValues","axis","key","getStaticValue","setStaticValue","syncRender","getProjectionStyles","styleProp","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","_g","transformOrigin","concat","origin","opacityExit","_h","correct","applyTo","corrected","num","resetTree","layout_1","measuredLayout","animationType","axisSnapshot","min","max","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","notifyBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"sources":["/Users/aditummala/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { __spreadArray, __read, __assign } from 'tslib';\nimport sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { transformAxes } from '../../render/html/utils/transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\n\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nvar animationTarget = 1000;\n/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nvar globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\nfunction createProjectionNode(_a) {\n    var attachResizeListener = _a.attachResizeListener, defaultParent = _a.defaultParent, measureScroll = _a.measureScroll, resetTransform = _a.resetTransform;\n    return /** @class */ (function () {\n        function ProjectionNode(id, latestValues, parent) {\n            var _this = this;\n            if (latestValues === void 0) { latestValues = {}; }\n            if (parent === void 0) { parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent(); }\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to actually\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = function () {\n                if (_this.isUpdating) {\n                    _this.isUpdating = false;\n                    _this.clearAllSnapshots();\n                }\n            };\n            this.updateProjection = function () {\n                _this.nodes.forEach(resolveTargetDelta);\n                _this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.id = id;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? __spreadArray(__spreadArray([], __read(parent.path), false), [parent], false) : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            id && this.root.registerPotentialNode(id, this);\n            for (var i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        ProjectionNode.prototype.addEventListener = function (name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        };\n        ProjectionNode.prototype.notifyListeners = function (name) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            var subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, __spreadArray([], __read(args), false));\n        };\n        ProjectionNode.prototype.hasListeners = function (name) {\n            return this.eventHandlers.has(name);\n        };\n        ProjectionNode.prototype.registerPotentialNode = function (id, node) {\n            this.potentialNodes.set(id, node);\n        };\n        /**\n         * Lifecycles\n         */\n        ProjectionNode.prototype.mount = function (instance, isLayoutDirty) {\n            var _this = this;\n            var _a;\n            if (isLayoutDirty === void 0) { isLayoutDirty = false; }\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            var _b = this.options, layoutId = _b.layoutId, layout = _b.layout, visualElement = _b.visualElement;\n            if (visualElement && !visualElement.getInstance()) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.id && this.root.potentialNodes.delete(this.id);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                var unblockTimeout_1;\n                var resizeUnblockUpdate_1 = function () {\n                    return (_this.root.updateBlockedByResize = false);\n                };\n                attachResizeListener(instance, function () {\n                    _this.root.updateBlockedByResize = true;\n                    clearTimeout(unblockTimeout_1);\n                    unblockTimeout_1 = window.setTimeout(resizeUnblockUpdate_1, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        _this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", function (_a) {\n                    var _b, _c, _d, _e, _f;\n                    var delta = _a.delta, hasLayoutChanged = _a.hasLayoutChanged, hasRelativeTargetChanged = _a.hasRelativeTargetChanged, newLayout = _a.layout;\n                    if (_this.isTreeAnimationBlocked()) {\n                        _this.target = undefined;\n                        _this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    var layoutTransition = (_c = (_b = _this.options.transition) !== null && _b !== void 0 ? _b : visualElement.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;\n                    var onLayoutAnimationComplete = visualElement.getProps().onLayoutAnimationComplete;\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    var targetChanged = !_this.targetLayout ||\n                        !boxEquals(_this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !_this.currentAnimation))) {\n                        if (_this.resumeFrom) {\n                            _this.resumingFrom = _this.resumeFrom;\n                            _this.resumingFrom.resumingFrom = undefined;\n                        }\n                        _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        var animationOptions = __assign(__assign({}, getValueTransition(layoutTransition, \"layout\")), { onComplete: onLayoutAnimationComplete });\n                        if (visualElement.shouldReduceMotion) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        _this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            _this.animationProgress === 0) {\n                            _this.finishAnimation();\n                        }\n                        _this.isLead() && ((_f = (_e = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e));\n                    }\n                    _this.targetLayout = newLayout;\n                });\n            }\n        };\n        ProjectionNode.prototype.unmount = function () {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        };\n        // only on the root\n        ProjectionNode.prototype.blockUpdate = function () {\n            this.updateManuallyBlocked = true;\n        };\n        ProjectionNode.prototype.unblockUpdate = function () {\n            this.updateManuallyBlocked = false;\n        };\n        ProjectionNode.prototype.isUpdateBlocked = function () {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        };\n        ProjectionNode.prototype.isTreeAnimationBlocked = function () {\n            var _a;\n            return (this.isAnimationBlocked ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\n                false);\n        };\n        // Note: currently only running on root node\n        ProjectionNode.prototype.startUpdate = function () {\n            var _a;\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n        };\n        ProjectionNode.prototype.willUpdate = function (shouldNotifyListeners) {\n            var _a, _b, _c;\n            if (shouldNotifyListeners === void 0) { shouldNotifyListeners = true; }\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                node.shouldResetTransform = true;\n                /**\n                 * TODO: Check we haven't updated the scroll\n                 * since the last didUpdate\n                 */\n                node.updateScroll();\n            }\n            var _d = this.options, layoutId = _d.layoutId, layout = _d.layout;\n            if (layoutId === undefined && !layout)\n                return;\n            var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        };\n        // Note: Currently only running on root node\n        ProjectionNode.prototype.didUpdate = function () {\n            var updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        };\n        ProjectionNode.prototype.clearAllSnapshots = function () {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        };\n        ProjectionNode.prototype.scheduleUpdateProjection = function () {\n            sync.preRender(this.updateProjection, false, true);\n        };\n        ProjectionNode.prototype.scheduleCheckAfterUnmount = function () {\n            var _this = this;\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(function () {\n                if (_this.isLayoutDirty) {\n                    _this.root.didUpdate();\n                }\n                else {\n                    _this.root.checkUpdateFailed();\n                }\n            });\n        };\n        /**\n         * Update measurements\n         */\n        ProjectionNode.prototype.updateSnapshot = function () {\n            if (this.snapshot || !this.instance)\n                return;\n            var measured = this.measure();\n            var layout = this.removeTransform(this.removeElementScroll(measured));\n            roundBox(layout);\n            this.snapshot = {\n                measured: measured,\n                layout: layout,\n                latestValues: {},\n            };\n        };\n        ProjectionNode.prototype.updateLayout = function () {\n            var _a;\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (var i = 0; i < this.path.length; i++) {\n                    var node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            var measured = this.measure();\n            roundBox(measured);\n            var prevLayout = this.layout;\n            this.layout = {\n                measured: measured,\n                actual: this.removeElementScroll(measured),\n            };\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.actual);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n        };\n        ProjectionNode.prototype.updateScroll = function () {\n            if (this.options.layoutScroll && this.instance) {\n                this.scroll = measureScroll(this.instance);\n            }\n        };\n        ProjectionNode.prototype.resetTransform = function () {\n            var _a;\n            if (!resetTransform)\n                return;\n            var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        };\n        ProjectionNode.prototype.measure = function () {\n            var visualElement = this.options.visualElement;\n            if (!visualElement)\n                return createBox();\n            var box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            var scroll = this.root.scroll;\n            if (scroll) {\n                translateAxis(box.x, scroll.x);\n                translateAxis(box.y, scroll.y);\n            }\n            return box;\n        };\n        ProjectionNode.prototype.removeElementScroll = function (box) {\n            var boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                var scroll_1 = node.scroll, options = node.options;\n                if (node !== this.root && scroll_1 && options.layoutScroll) {\n                    translateAxis(boxWithoutScroll.x, scroll_1.x);\n                    translateAxis(boxWithoutScroll.y, scroll_1.y);\n                }\n            }\n            return boxWithoutScroll;\n        };\n        ProjectionNode.prototype.applyTransform = function (box, transformOnly) {\n            if (transformOnly === void 0) { transformOnly = false; }\n            var withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.x,\n                        y: -node.scroll.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        };\n        ProjectionNode.prototype.removeTransform = function (box) {\n            var _a;\n            var boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                var sourceBox = createBox();\n                var nodeBox = node.measure();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        };\n        /**\n         *\n         */\n        ProjectionNode.prototype.setTargetDelta = function (delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n        };\n        ProjectionNode.prototype.setOptions = function (options) {\n            var _a;\n            this.options = __assign(__assign(__assign({}, this.options), options), { crossfade: (_a = options.crossfade) !== null && _a !== void 0 ? _a : true });\n        };\n        ProjectionNode.prototype.clearMeasurements = function () {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        };\n        /**\n         * Frame calculations\n         */\n        ProjectionNode.prototype.resolveTargetDelta = function () {\n            var _a;\n            var _b = this.options, layout = _b.layout, layoutId = _b.layoutId;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent && this.relativeParent.layout) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.actual);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.actual);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.actual);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent &&\n                    Boolean(this.relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !this.relativeParent.options.layoutScroll &&\n                    this.relativeParent.target) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n        };\n        ProjectionNode.prototype.getClosestProjectingParent = function () {\n            if (!this.parent || hasTransform(this.parent.latestValues))\n                return undefined;\n            if ((this.parent.relativeTarget || this.parent.targetDelta) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        };\n        ProjectionNode.prototype.calcProjection = function () {\n            var _a;\n            var _b = this.options, layout = _b.layout, layoutId = _b.layoutId;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            var lead = this.getLead();\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.actual);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n            var target = lead.target;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            var prevTreeScaleX = this.treeScale.x;\n            var prevTreeScaleY = this.treeScale.y;\n            var prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        };\n        ProjectionNode.prototype.hide = function () {\n            this.isVisible = false;\n            // TODO: Schedule render\n        };\n        ProjectionNode.prototype.show = function () {\n            this.isVisible = true;\n            // TODO: Schedule render\n        };\n        ProjectionNode.prototype.scheduleRender = function (notifyAll) {\n            var _a, _b, _c;\n            if (notifyAll === void 0) { notifyAll = true; }\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        };\n        ProjectionNode.prototype.setAnimationOrigin = function (delta, hasOnlyRelativeTargetChanged) {\n            var _this = this;\n            var _a;\n            if (hasOnlyRelativeTargetChanged === void 0) { hasOnlyRelativeTargetChanged = false; }\n            var snapshot = this.snapshot;\n            var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            var mixedValues = __assign({}, this.latestValues);\n            var targetDelta = createDelta();\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            var relativeLayout = createBox();\n            var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n            var isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n            var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = function (latest) {\n                var _a;\n                var progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                _this.setTargetDelta(targetDelta);\n                if (_this.relativeTarget &&\n                    _this.relativeTargetOrigin &&\n                    _this.layout &&\n                    ((_a = _this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);\n                    mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    _this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, _this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                _this.root.scheduleUpdateProjection();\n                _this.scheduleRender();\n                _this.animationProgress = progress;\n            };\n            this.mixTargetDelta(0);\n        };\n        ProjectionNode.prototype.startAnimation = function (options) {\n            var _this = this;\n            var _a, _b;\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(function () {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                _this.currentAnimation = animate(0, animationTarget, __assign(__assign({}, options), { onUpdate: function (latest) {\n                        var _a;\n                        _this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    }, onComplete: function () {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        _this.completeAnimation();\n                    } }));\n                if (_this.resumingFrom) {\n                    _this.resumingFrom.currentAnimation = _this.currentAnimation;\n                }\n                _this.pendingAnimation = undefined;\n            });\n        };\n        ProjectionNode.prototype.completeAnimation = function () {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        };\n        ProjectionNode.prototype.finishAnimation = function () {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        };\n        ProjectionNode.prototype.applyTransformsToTarget = function () {\n            var _a = this.getLead(), targetWithTransforms = _a.targetWithTransforms, target = _a.target, layout = _a.layout, latestValues = _a.latestValues;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its actual layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        };\n        ProjectionNode.prototype.registerSharedNode = function (layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            var stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\n            });\n        };\n        ProjectionNode.prototype.isLead = function () {\n            var stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        };\n        ProjectionNode.prototype.getLead = function () {\n            var _a;\n            var layoutId = this.options.layoutId;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        };\n        ProjectionNode.prototype.getPrevLead = function () {\n            var _a;\n            var layoutId = this.options.layoutId;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        };\n        ProjectionNode.prototype.getStack = function () {\n            var layoutId = this.options.layoutId;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        };\n        ProjectionNode.prototype.promote = function (_a) {\n            var _b = _a === void 0 ? {} : _a, needsReset = _b.needsReset, transition = _b.transition, preserveFollowOpacity = _b.preserveFollowOpacity;\n            var stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition: transition });\n        };\n        ProjectionNode.prototype.relegate = function () {\n            var stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        };\n        ProjectionNode.prototype.resetRotation = function () {\n            var visualElement = this.options.visualElement;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            var hasRotate = false;\n            // Keep a record of all the values we've reset\n            var resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (var i = 0; i < transformAxes.length; i++) {\n                var axis = transformAxes[i];\n                var key = \"rotate\" + axis;\n                // If this rotation doesn't exist as a motion value, then we don't\n                // need to reset it\n                if (!visualElement.getStaticValue(key)) {\n                    continue;\n                }\n                hasRotate = true;\n                // Record the rotation and then temporarily set it to 0\n                resetValues[key] = visualElement.getStaticValue(key);\n                visualElement.setStaticValue(key, 0);\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender();\n            // Put back all the values we reset\n            for (var key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        };\n        ProjectionNode.prototype.getProjectionStyles = function (styleProp) {\n            var _a, _b, _c, _d, _e, _f;\n            if (styleProp === void 0) { styleProp = {}; }\n            // TODO: Return lifecycle-persistent object\n            var styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            var lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                var emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            var valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            var _g = this.projectionDelta, x = _g.x, y = _g.y;\n            styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its actual\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : \"\"\n                        : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (var key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                var _h = scaleCorrectors[key], correct = _h.correct, applyTo = _h.applyTo;\n                var corrected = correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    var num = applyTo.length;\n                    for (var i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        };\n        ProjectionNode.prototype.clearSnapshot = function () {\n            this.resumeFrom = this.snapshot = undefined;\n        };\n        // Only run on root\n        ProjectionNode.prototype.resetTree = function () {\n            this.root.nodes.forEach(function (node) { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        };\n        return ProjectionNode;\n    }());\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c, _d;\n    var snapshot = (_b = (_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        var _e = node.layout, layout_1 = _e.actual, measuredLayout = _e.measured;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (node.options.animationType === \"size\") {\n            eachAxis(function (axis) {\n                var axisSnapshot = snapshot.isShared\n                    ? snapshot.measured[axis]\n                    : snapshot.layout[axis];\n                var length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout_1[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (node.options.animationType === \"position\") {\n            eachAxis(function (axis) {\n                var axisSnapshot = snapshot.isShared\n                    ? snapshot.measured[axis]\n                    : snapshot.layout[axis];\n                var length = calcLength(layout_1[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        var layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout_1, snapshot.layout);\n        var visualDelta = createDelta();\n        if (snapshot.isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout_1, snapshot.layout);\n        }\n        var hasLayoutChanged = !isDeltaZero(layoutDelta);\n        var hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            node.relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (node.relativeParent && !node.relativeParent.resumeFrom) {\n                var _f = node.relativeParent, parentSnapshot = _f.snapshot, parentLayout = _f.layout;\n                if (parentSnapshot && parentLayout) {\n                    var relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n                    var relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout_1, parentLayout.actual);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout: layout_1,\n            snapshot: snapshot,\n            delta: visualDelta,\n            layoutDelta: layoutDelta,\n            hasLayoutChanged: hasLayoutChanged,\n            hasRelativeTargetChanged: hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        (_d = (_c = node.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    var visualElement = node.options.visualElement;\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notifyBeforeLayoutMeasure();\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nvar defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, id) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    var searchNode = node.root;\n    for (var i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    var element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(id, \"\\\"]\"));\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\n\nexport { createProjectionNode, globalProjectionState, mixAxis, mixAxisDelta, mixBox };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}